/********************************************************************** 
       DAX measures
***********************************************************************/



//--------------------------------------------------------------------
//     AllSelectedDatesInCurrentQtr
//-------------------------------------------------------------------- 

AllSelectedDatesInCurrentQtr:=VAR _Qtr = 
   VALUES(DateTable[QuarterInCalendar])

RETURN
IF(
    HASONEVALUE(DateTable[QuarterInCalendar]), 
    CALCULATE(
            MAX(DateTable[Date]),
            ALLSELECTED(DateTable),
            DateTable[QuarterInCalendar] = _Qtr
    )
)


//--------------------------------------------------------------------
//     ContextContainsMaxAllSelectedDatesInCurrentYear
//-------------------------------------------------------------------- 

ContextContainsMaxAllSelectedDatesInCurrentYear:=Var _MinDateInContext = MIN(DateTable[Date])

VAR _MaxDateInContext = MAX(DateTable[Date])

VAR _ReturnValue = ([MaxAllSelectedDatesInCurrentYear] >= _MinDateInContext) && 
   ([MaxAllSelectedDatesInCurrentYear] <= _MaxDateInContext)
   
RETURN
   _ReturnValue


//--------------------------------------------------------------------
//     ContextIncludesWholeMonthsOnly
//-------------------------------------------------------------------- 

ContextIncludesWholeMonthsOnly:=VAR _StartOfFirstMonth = 
    EOMONTH(MIN(DateTable[Date]), -1) + 1
    
VAR _EndOfLastMonthEnd = 
    EOMONTH(MAX(DateTable[Date]), 0)

VAR _ReturnValue = 
   COUNTROWS(DateTable) = (_EndOfLastMonthEnd - _StartOfFirstMonth +1)
      
RETURN 
    _ReturnValue


//--------------------------------------------------------------------
//     ContextIncludesWholeQuartersOnly
//-------------------------------------------------------------------- 

ContextIncludesWholeQuartersOnly:=VAR _StartOfFirstQtr = 
    STARTOFQUARTER(DateTable[Date])
    
VAR _EndOfLastQtr = 
    ENDOFQUARTER(DateTable[Date])

VAR _ReturnValue = 
   COUNTROWS(DateTable) = (_EndOfLastQtr - _StartOfFirstQtr +1)
      
RETURN 
    _ReturnValue


//--------------------------------------------------------------------
//     ContextIncludesWholeYearsOnly
//-------------------------------------------------------------------- 

ContextIncludesWholeYearsOnly:=VAR _StartOfFirstYear = 
    DATE(YEAR(MIN(DateTable[Date])), 1, 1)
    
VAR _EndOfLastYear = 
    DATE(YEAR(MAX(DateTable[Date])), 12, 31)

VAR _ReturnValue = 
   COUNTROWS(DateTable) = (_EndOfLastYear - _StartOfFirstYear +1)
      
RETURN 
    _ReturnValue


//--------------------------------------------------------------------
//     Count of QuarterInCalendar
//-------------------------------------------------------------------- 

Count of QuarterInCalendar:=COUNTA('DateTable'[QuarterInCalendar])


//--------------------------------------------------------------------
//     EXAMPLE Check items in data table not in lookup table
//-------------------------------------------------------------------- 

EXAMPLE Check items in data table not in lookup table:=VAR _MissingItems = 
    EXCEPT(VALUES(Example_DataTable[Foreign Key]), VALUES(Example_LookupTable[Primary Key]))
    
VAR _ReturnValue = 
    IF(
        ISBLANK(COUNTROWS(_MissingItems)),
        1,
        0
      )
      
RETURN
    _ReturnValue


//--------------------------------------------------------------------
//     EXAMPLE Check list items in data table not in lookup table
//-------------------------------------------------------------------- 

EXAMPLE Check list items in data table not in lookup table:=VAR _MissingItems = 
    EXCEPT(VALUES(Example_DataTable[Foreign Key]), VALUES(Example_LookupTable[Primary Key]))

VAR _ReturnValue = 
    CONCATENATEX(_MissingItems, Example_DataTable[Foreign Key], "|")
    
RETURN
    _ReturnValue


//--------------------------------------------------------------------
//     IsMaxWholeMonthInCurrentYear
//-------------------------------------------------------------------- 

IsMaxWholeMonthInCurrentYear:=SWITCH(
    TRUE(),
    NOT([IsSingleWholeMonth]), FALSE,
    VALUES(DateTable[EndOfMonth]) = [MaxAllSelectedDatesInCurrentYear],
    FALSE()
)


//--------------------------------------------------------------------
//     IsSingleWholeMonth
//-------------------------------------------------------------------- 

IsSingleWholeMonth:=HASONEVALUE(DateTable[EndOfMonth]) && [ContextIncludesWholeMonthsOnly]


//--------------------------------------------------------------------
//     IsSingleWholeQtr
//-------------------------------------------------------------------- 

IsSingleWholeQtr:=HASONEVALUE(DateTable[EndOfQtr]) && [ContextIncludesWholeQuartersOnly]


//--------------------------------------------------------------------
//     IsSingleWholeYear
//-------------------------------------------------------------------- 

IsSingleWholeYear:=HASONEVALUE(DateTable[Year]) && [ContextIncludesWholeYearsOnly]


//--------------------------------------------------------------------
//     Jnls_ExTimeLogic
//-------------------------------------------------------------------- 

Jnls_ExTimeLogic:=SUM(Example_Jnls[Jnl Amount])


//--------------------------------------------------------------------
//     Journals
//-------------------------------------------------------------------- 

Journals:=VAR _MTD = CALCULATE(
    [Jnls_ExTimeLogic],
    DATESMTD(DateTable[Date]))

VAR _QTD =  CALCULATE(
    [Jnls_ExTimeLogic],
    DATESQTD(DateTable[Date]))

VAR _YTD = CALCULATE(
    [Jnls_ExTimeLogic],
    DATESYTD(DateTable[Date]))

VAR _PY = CALCULATE(
    [Jnls_ExTimeLogic],
    PREVIOUSYEAR(DateTable[Date]))
    
VAR _Total = [Jnls_ExTimeLogic]
        
VAR _ReturnValue = SWITCH(
   TRUE, 
   [TimePeriodForJournals] = "MTD" && [SelectedPeriodContainsOneMonthEnd], _MTD,
   [TimePeriodForJournals] = "QTD" && [SelectedPeriodContainsOneQuarterEnd], _QTD, 
   [TimePeriodForJournals] = "YTD" && ([SelectedPeriodContainsOneYearEnd] || [ContextContainsMaxAllSelectedDatesInCurrentYear]),  _YTD,
   [TimePeriodForJournals] = "PY" && ([SelectedPeriodContainsOneYearEnd] || [ContextContainsMaxAllSelectedDatesInCurrentYear]), _PY,
   [TimePeriodForJournals] = "Total", _Total, 
   BLANK()
)
  
RETURN
    _ReturnValue


//--------------------------------------------------------------------
//     MaxAllSelectedDates
//-------------------------------------------------------------------- 

MaxAllSelectedDates:=CALCULATE(
        MAX(DateTable[Date]),
        ALLSELECTED(DateTable)
    )


//--------------------------------------------------------------------
//     MaxAllSelectedDatesInCurrentQtr
//-------------------------------------------------------------------- 

MaxAllSelectedDatesInCurrentQtr:=VAR _Qtr = 
   VALUES(DateTable[QuarterInCalendar])

RETURN
IF(
    HASONEVALUE(DateTable[QuarterInCalendar]), 
    CALCULATE(
            MAX(DateTable[Date]),
            ALLSELECTED(DateTable),
            DateTable[QuarterInCalendar] = _Qtr
    )
)


//--------------------------------------------------------------------
//     MaxAllSelectedDatesInCurrentYear
//-------------------------------------------------------------------- 

MaxAllSelectedDatesInCurrentYear:=VAR _Year = 
   VALUES(DateTable[Year])

RETURN
IF(
    HASONEVALUE(DateTable[Year]), 
    CALCULATE(
            MAX(DateTable[Date]),
            ALLSELECTED(DateTable),
            DateTable[Year] = _Year
    )
)


//--------------------------------------------------------------------
//     MaxAllSelectedMonthsInCurrentYear
//-------------------------------------------------------------------- 

MaxAllSelectedMonthsInCurrentYear:=VAR _Year = 
   VALUES(DateTable[Year])

RETURN
IF(
    HASONEVALUE(DateTable[Year]), 
    CALCULATE(
            MAX(DateTable[EndOfMonth]),
            ALLSELECTED(DateTable),
            DateTable[Year] = _Year
    )
)


//--------------------------------------------------------------------
//     NoGapsInDateRange
//-------------------------------------------------------------------- 

NoGapsInDateRange:=VAR _FirstDate = MIN(DateTable[Date])
    
VAR _LastDate = MAX(DateTable[Date])

VAR _ReturnValue = COUNTROWS(DateTable) = (_LastDate - _FirstDate + 1)

RETURN
   _ReturnValue


//--------------------------------------------------------------------
//     NumberScaleAdj
//-------------------------------------------------------------------- 

NumberScaleAdj:=IF(
    HASONEVALUE(NumberScale[ShowValuesAs]),
    VALUES(NumberScale[DivideBy]),
    1)


//--------------------------------------------------------------------
//     OUTDATED_OkToDisplayPandL
//-------------------------------------------------------------------- 

OUTDATED_OkToDisplayPandL:=VAR _NoGapsInDateRange = 
    COUNT(DateTable[Date]) = (MAX(DateTable[Date]) - MIN(DateTable[Date]) +1)

VAR _TbExistsForMonth = 
    NOT(ISEMPTY(VALUES(Example_TB[EndOfMonth])))
    
VAR _ReturnValue = 
    _NoGapsInDateRange && _TbExistsForMonth

RETURN 
    _ReturnValue


//--------------------------------------------------------------------
//     OUTDATED_OkToDisplayPandL_MTD
//-------------------------------------------------------------------- 

OUTDATED_OkToDisplayPandL_MTD:=[OUTDATED_OkToDisplayPandL] && 
    HASONEVALUE(DateTable[EndOfMonth])


//--------------------------------------------------------------------
//     OUTDATED_OkToDisplayPandL_PY
//-------------------------------------------------------------------- 

OUTDATED_OkToDisplayPandL_PY:=[OUTDATED_OkToDisplayPandL_YTD] &&
    CALCULATE(
        COUNTROWS(VALUES(Example_TB[EndOfMonth])),
        PREVIOUSYEAR(DateTable[Date])
    ) <>  0


//--------------------------------------------------------------------
//     OUTDATED_OkToDisplayPandL_QTD
//-------------------------------------------------------------------- 

OUTDATED_OkToDisplayPandL_QTD:=SWITCH(
    TRUE,
    NOT[OUTDATED_OkToDisplayPandL], FALSE(), 
    NOT(HASONEVALUE (DateTable[EndOfQtr])), FALSE(), 
    MAX (DateTable[Date]) = VALUES(DateTable[EndOfQtr]), TRUE() ,      //Date is the last day of the quarter
    FALSE()
    )


//--------------------------------------------------------------------
//     OUTDATED_OkToDisplayPandL_YTD
//-------------------------------------------------------------------- 

OUTDATED_OkToDisplayPandL_YTD:=SWITCH(
    TRUE,
    NOT[OUTDATED_OkToDisplayPandL], FALSE(), 
    NOT(HASONEVALUE (DateTable[Year])), FALSE(), 
    MAX (DateTable[Date]) = VALUES(DateTable[EndOfYear]), TRUE() ,      //Date is the last day of the year
    MAX ( DateTable[Date] ) = [MaxAllSelectedDatesInCurrentYear], TRUE(),    //Date is the last date selected for year end
    FALSE()
    )


//--------------------------------------------------------------------
//     OUTDATED_P&L (From Jnls)
//-------------------------------------------------------------------- 

OUTDATED_P&L (From Jnls):=VAR _PandL_YTD =  CALCULATE(
        -[Jnls_ExTimeLogic],
        KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
        DATESYTD(DateTable[Date]))

VAR _PandL_QTD =  CALCULATE(
        -[Jnls_ExTimeLogic],
        KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
        DATESQTD(DateTable[Date]))

VAR _PandL_MTD = CALCULATE(
        -[Jnls_ExTimeLogic],
        KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
        DATESMTD(DateTable[Date]))

VAR _PandL_PY = CALCULATE(
        -[Jnls_ExTimeLogic],
        KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
        PREVIOUSYEAR(DateTable[Date]))
        
RETURN
    SWITCH(
        TRUE(),
        [TimePeriodForPandL] = "YTD" && [OUTDATED_OkToDisplayPandL_YTD],  _PandL_YTD,
        [TimePeriodForPandL] = "QTD" && [OUTDATED_OkToDisplayPandL_QTD], _PandL_QTD,
        [TimePeriodForPandL] = "MTD" && [OUTDATED_OkToDisplayPandL_MTD], _PandL_MTD,
        [TimePeriodForPandL] = "PY" && [OUTDATED_OkToDisplayPandL_PY], _PandL_PY
        )


//--------------------------------------------------------------------
//     OUTDATED_P&L Account Level
//-------------------------------------------------------------------- 

OUTDATED_P&L Account Level:=VAR _LastDateSelected = 
    MAX(DateTable[Date])

VAR _PandL_YTD =  CALCULATE(
        -[TB],
        KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
        TimePeriods[Time Period] = "YTD",   //Need to set this otherwise YTD tb will show blank when QTD or MTD is selected
        DateTable[Date] = _LastDateSelected)

VAR _LastDatePriorQuarter = LASTDATE(PREVIOUSQUARTER(DateTable[Date]))

VAR _PandL_YTD_PriorQtrEnd =   CALCULATE(
        -[TB],
        KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
        TimePeriods[Time Period] = "YTD",   //Need to set this otherwise YTD tb will show blank when QTD or MTD is selected        
        DateTable[Date] = _LastDatePriorQuarter)

VAR _PandL_QTD =IF(
   MONTH(_LastDateSelected) <=3, 
   _PandL_YTD,
   _PandL_YTD - _PandL_YTD_PriorQtrEnd)


VAR _LastDatePriorMonth = LASTDATE(PREVIOUSMONTH(DateTable[Date]))

VAR _PandL_YTD_PriorMonthEnd = CALCULATE(
    -[TB],
    KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
    TimePeriods[Time Period] = "YTD",   //Need to set this otherwise YTD tb will show blank when QTD or MTD is selected        
    DateTable[Date] = _LastDatePriorMonth)    

VAR _PandL_MTD  = IF(
    MONTH(_LastDateSelected) = 1, 
    _PandL_YTD,
    _PandL_YTD - _PandL_YTD_PriorMonthEnd)

VAR _LastDatePY = LASTDATE(PREVIOUSYEAR(DateTable[Date]))

VAR _PandL_PY =  CALCULATE(
    -[TB],
    KEEPFILTERS(Example_ChartOfAccounts[Account Category 1]  = "Profit and loss"),
    TimePeriods[Time Period] = "YTD",   //Need to set this otherwise YTD tb will show blank when QTD or MTD is selected        
    DateTable[Date] = _LastDatePY) 
        
RETURN
    SWITCH(
        TRUE(),
        [TimePeriodForPandL] = "YTD" && [OUTDATED_OkToDisplayPandL_YTD],  _PandL_YTD,
        [TimePeriodForPandL] = "QTD" && [OUTDATED_OkToDisplayPandL_QTD], _PandL_QTD,
        [TimePeriodForPandL] = "MTD" && [OUTDATED_OkToDisplayPandL], _PandL_MTD,
        [TimePeriodForPandL] = "PY" && [OUTDATED_OkToDisplayPandL_PY], _PandL_PY
        )


//--------------------------------------------------------------------
//     SelectedPeriodContainsOneMonthEnd
//-------------------------------------------------------------------- 

SelectedPeriodContainsOneMonthEnd:=CALCULATE(
    COUNTROWS(DateTable),
    KEEPFILTERS(DateTable[IsEndOfMonth])
) = 1


//--------------------------------------------------------------------
//     SelectedPeriodContainsOneQuarterEnd
//-------------------------------------------------------------------- 

SelectedPeriodContainsOneQuarterEnd:=CALCULATE(
    COUNTROWS(DateTable),
    KEEPFILTERS(DateTable[IsEndOfQtr])
) = 1


//--------------------------------------------------------------------
//     SelectedPeriodContainsOneYearEnd
//-------------------------------------------------------------------- 

SelectedPeriodContainsOneYearEnd:=CALCULATE(
    COUNTROWS(DateTable),
    KEEPFILTERS(DateTable[IsEndOfYear])
) = 1


//--------------------------------------------------------------------
//     TB
//-------------------------------------------------------------------- 

TB:=IF(
    [TimePeriodForTb] =  "YTD" && HASONEVALUE(DateTable[EndOfMonth]),
    [TB_ExTimeLogic]
)


//--------------------------------------------------------------------
//     TB_ExTimeLogic
//-------------------------------------------------------------------- 

TB_ExTimeLogic:=SUM(Example_TB[Amount])


//--------------------------------------------------------------------
//     TimePeriodForJournals
//-------------------------------------------------------------------- 

TimePeriodForJournals:=SWITCH(
    TRUE(),
    HASONEVALUE(TimePeriods[Time Period]), Values(TimePeriods[Time Period]),
    NOT(ISFILTERED(TimePeriods[Time Period])), "Total",
    BLANK()
)


//--------------------------------------------------------------------
//     TimePeriodForPandL
//-------------------------------------------------------------------- 

TimePeriodForPandL:=SWITCH(
      //  Cant just rely on HASONEVALUE, otherwise for example MTD numbers are geneterated when both YTD and QTD are selected
    TRUE(),
    HASONEVALUE(TimePeriods[Time Period]), VALUES(TimePeriods[Time Period]),
    NOT(ISFILTERED(TimePeriods[Time Period])), "MTD",
    BLANK()
    )


//--------------------------------------------------------------------
//     TimePeriodForTb
//-------------------------------------------------------------------- 

TimePeriodForTb:=IF(
    HASONEVALUE(TimePeriods[Time Period]),
    VALUES(TimePeriods[Time Period]),
    "YTD"
    )